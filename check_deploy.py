#!/usr/bin/env python3
"""
Script para verificar se tudo est√° configurado corretamente antes do deploy
"""
import os
import json
from dotenv import load_dotenv

def check_environment():
    print("üîç Verificando configura√ß√£o para deploy no Render...")
    
    # Carregar .env para teste local
    load_dotenv()
    
    issues = []
    
    # Verificar vari√°veis essenciais
    vertex_project = os.getenv("VERTEX_AI_PROJECT_ID")
    if not vertex_project:
        issues.append("‚ùå VERTEX_AI_PROJECT_ID n√£o configurado")
    else:
        print(f"‚úÖ VERTEX_AI_PROJECT_ID: {vertex_project}")
    
    credentials = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    if not credentials:
        issues.append("‚ùå GOOGLE_APPLICATION_CREDENTIALS n√£o configurado")
    elif credentials.startswith("{"):
        try:
            json.loads(credentials)
            print("‚úÖ GOOGLE_APPLICATION_CREDENTIALS: JSON v√°lido")
        except json.JSONDecodeError:
            issues.append("‚ùå GOOGLE_APPLICATION_CREDENTIALS: JSON inv√°lido")
    else:
        if os.path.exists(credentials):
            print(f"‚úÖ GOOGLE_APPLICATION_CREDENTIALS: {credentials} (arquivo existe)")
        else:
            issues.append(f"‚ùå GOOGLE_APPLICATION_CREDENTIALS: {credentials} (arquivo n√£o encontrado)")
    
    # Verificar arquivos essenciais
    essential_files = [
        "main.py", "model.py", "db.py", 
        "requirements.txt", "render.yaml", "apt.txt"
    ]
    
    for file in essential_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            issues.append(f"‚ùå {file} n√£o encontrado")
    
    # Resultado
    if issues:
        print("\nüö® PROBLEMAS ENCONTRADOS:")
        for issue in issues:
            print(f"  {issue}")
        print("\n‚ùå Corrija os problemas antes de fazer deploy!")
        return False
    else:
        print("\nüéâ Tudo OK! Pronto para deploy no Render!")
        return True

if __name__ == "__main__":
    check_environment()
